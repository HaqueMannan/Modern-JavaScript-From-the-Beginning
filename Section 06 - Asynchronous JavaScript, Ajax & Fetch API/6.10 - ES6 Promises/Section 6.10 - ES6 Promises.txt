Section 6.10. ES6 Promises:

--------------------------------------
ES6 Promises
--------------------------------------
- Promises is part of the ES6 standard and is an alternative to callbacks i.e. an alternative way of handling asynchronous operations.
- They are called promises because while they are handling asynchronous operations, they can promise to do something when that operation has finished.
- We handle a promise using the .then keyword.
- The Fetch API is the new standard to make HTTP Requests and it returns a promise. Therefore, it is important to understand ES6 Promises before we start to look at the Fetch API in section 6.11 - The Fetch API.

Please refer to the js_sandbox_6.10 folder for example and commentary on ES6 Promises.


--------------------------------------
ES5 Callbacks vs ES6 Promises Comparison
--------------------------------------

const posts = [
   {title: 'Post One', body: 'This is post one'},
   {title: 'Post Two', body: 'This is post two'}
];

--------------------------------------
ES5 Callbacks
--------------------------------------
> createPost() Function:

   function createPost(post, callback) {
      setTimeout(function() {
         posts.push(post);
         callback();
      }, 2000);
   }

> getPosts() Function:

   function getPosts() {
      setTimeout(function() {
         let output = '';
         posts.forEach(function(post){
            output += `<li>${post.title}</li>`;
         });
         document.body.innerHTML = output;
      }, 1000);
   }

> createPost called - passing in an object as the post parameter and calling on getPosts function as the callback to run after the createPost() function have completed to asynchronously get all posts including the new post:

   createPost({title: 'Post Three', body: 'This is post three'}, getPosts);



--------------------------------------
ES6 Promises
--------------------------------------
> createPost Function:
- function(resolve, reject)
   > resolve is what we want to call when we are done with what we are doing. 
   > reject is when we want to call something if there is some kind of error we want to throw.
- resolve();
   > we would use this instead of callback.
- reject('Error: Something went wrong')
   > we would use this to return something when there is an error.

   function createPost(post) {
      return new Promise(function(resolve, reject){
         setTimeout(function() {
            posts.push(post);

            const error = false;

            if(!error) {
               resolve();
            } else {
               reject('Error: Something went wrong');
            }
         }, 2000);
      });
   }


> getPosts Function:

   function getPosts() {
      setTimeout(function() {
         let output = '';
         posts.forEach(function(post){
            output += `<li>${post.title}</li>`;
         });
         document.body.innerHTML = output;
      }, 1000);
   }


> ES6 Promises for asynchronous functions:
   - We handle the resolve promise by using the .then(getPosts) function which is the replacement for the callback function.
   - We would use .catch(function(err)) function for the reject error.

   createPost({title: 'Post Three', body: 'This is post three'})
   .then(getPosts)
   .catch(function(err) {
      console.log(err);
   });